}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:n.sim), y = rep(0.07, 20), x = (1:20)*0.04+0.06, just = "left")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:n.sim), y = rep(0.07, 20), x = (1:20)*0.04+0.08, just = "left")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:n.sim), y = rep(0.07, 20), x = (1:20)*0.04+0.075, just = "left")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:n.sim/2)*2, y = rep(0.07, 20), x = (1:20)*0.04+0.075, just = "left")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:20)*0.04+0.075, just = "left")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.075, just = "left")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.075, just = "center")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.08, just = "center")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
mean(precision)
mean(recall)
load("~/Desktop/PhD3/Project/KernelTweedie/Simulation_redo/c4_sk/c4_50_500.Rdata")
mean(precision)
mean(recall)
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.14, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.08, just = "center")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.1, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.08, just = "center")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.11, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.08, just = "center")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.12, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.08, just = "center")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
dat <- data.frame(x = rep(seq(0, 1-1/n.sim, 1/n.sim), each = P),
y = rep(seq(1-1/P, 0, -1/P), 100),
val = rep(c(www), 20/n.sim))
# making relative values (%) to be used for color-gradiation in plot
dat$rel <- 100 * dat$val / max(dat$val)
# creating grey-tones relative to val -
# maximum greytone is relative to the val-maximum
# i use the reciprocal to get darker tones for higher values:
dat$col<-paste("grey", 100 - round(dat$rel, 0), sep = "")
# opening the graphic device and
# setting up a viewport with borders:
grid.newpage()
vp1 <- viewport(x = 0.1, y = 0.1, w = 0.8, h = 0.8,
just = c("left", "bottom"), name = "vp1")
# plotting rectangles using x/y positions
grid.rect(x=dat$x,y=dat$y,height=1/P,width=1/n.sim,hjust=0,vjust=0,vp=vp1,
gp=gpar(col=1, fill=as.character(dat$col)))
# adding labels
grid.text((1:10)*P/10, x = rep(0.09, 10), y = (9:0)*0.08+0.115, just = "right")
grid.text("Weights", x = 0.03, y = 0.5, rot = 90)
grid.text((1:(n.sim/2))*2, y = rep(0.07, 20), x = (1:10)*0.08+0.08, just = "center")
grid.text("Replications", x = 0.5, y = 0.03)
for (i in 1:10) {
grid.segments(x0 = 0.095, y0 = 0.1+0.08*(i-1), x1 = 0.1, y1 = 0.1+0.08*(i-1))
grid.segments(x0 = 0.1+0.08*i, y0 = 0.09, x1 = 0.1+0.08*i, y1 = 0.1)
}
grid.rect(x = 0.1, y = 0.9, width = 0.8, height = 5/P*0.8, just = c("left", "top"),
gp=gpar(col=2, fill = 0, lwd = 3) )
p
N
ddd <- tweedie::rtweedie(n = 1e5, xi = 1.5, phi = 0.5)
library(tweedie)
ddd <- tweedie::rtweedie(n = 1e5, mu = 5, xi = 1.5, phi = 0.5)
hist(ddd)
ddd <- tweedie::rtweedie(n = 1e5, mu = 2, xi = 1.5, phi = 0.5)
hist(ddd)
ddd <- tweedie::rtweedie(n = 1e5, mu = 1, xi = 1.5, phi = 0.5)
hist(ddd)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.1, xi = 1.5, phi = 0.5)
hist(ddd)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.01, xi = 1.5, phi = 0.5)
hist(ddd)
sum(ddd == 0)
mean(ddd[ddd!=0])
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.01, xi = 1.8, phi = 0.5)
hist(ddd)
sum(ddd == 0)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.01, xi = 1.9, phi = 0.5)
hist(ddd)
sum(ddd == 0)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.01, xi = 1.1, phi = 0.5)
hist(ddd)
sum(ddd == 0)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.01, xi = 1.2, phi = 0.5)
hist(ddd)
sum(ddd == 0)
mean(ddd[ddd!=0])
hist(ddd, breaks = 100)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.1, xi = 1.2, phi = 0.5)
hist(ddd, breaks = 100)
sum(ddd == 0)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.2, phi = 0.5)
hist(ddd, breaks = 100)
sum(ddd == 0)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.3, xi = 1.2, phi = 0.5)
hist(ddd, breaks = 100)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.2, phi = 0.5)
hist(ddd, breaks = 100)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.2, phi = 1)
hist(ddd, breaks = 100)
sum(ddd == 0)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.2, phi = 2)
hist(ddd, breaks = 100)
sum(ddd == 0)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.2, phi = 1)
hist(ddd, breaks = 100)
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.3, phi = 1)
hist(ddd, breaks = 100)
sum(ddd == 0)
hist(ddd, breaks = 100, main = "")
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.25, phi = 1)
hist(ddd, breaks = 100, main = "", xlab = "mu = 0.2, rho = 1.3, phi = 1")
sum(ddd == 0)
mean(ddd[ddd!=0])
ddd <- tweedie::rtweedie(n = 1e5, mu = 0.2, xi = 1.25, phi = 1)
hist(ddd, breaks = 100, main = "", xlab = "mu = 0.2, rho = 1.2, phi = 1")
sum(ddd == 0)
mean(ddd[ddd!=0])
a <- ggplot(economics, aes(date, unemploy))
install.packages("ggplot2")
library(ggplot2)
a <- ggplot(economics, aes(date, unemploy))
a + geom_blank()(
a + geom_blank()
)
a <- ggplot(economics, aes(date, unemploy))
a + geom_blank()
View(economics)
a + geom_path(lineend="butt", linejoin="round", linemitre=1)
ggplot(mpg, aes(displ, hwy)) + geom_point()
class <- "EPIB613"
class <- "EPIB613"
x <- 10
plot(1:10)
library(brew)
detach("package:brew", unload = TRUE)
aes(x = mpg, y = wt)
aes(mpg, wt)
knitr::opts_chunk$set(echo = TRUE)
numbers <- c(1,3254,12,34,123,4)
mean(numbers)
numbers <- c(1,3254,12,34,123,4)
mean(numbers)
1/3
1/3
11/3
11111/3
111111111111111111/3
options(digits = 22)
111111111111111111/3
37037037037037032 * 3
library(ggplot2)
2+3
x <- 5
course <- "epib 613"
1/3
11111111111/3
1111111111111111/3
df <- read.csv("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020/scores.csv")
View(df)
a <- 2
myfunc <- function(x){x*2}
b <- 1:5
btimes2 <- myfunc(b)
?matrix
mtcars
df <- mtcars
qsec
attach(qsec)
attach(df)
qsec
qsec * 2
qsec <- qsec * 2
df$qsec
qsec
mtcars
data()
precip
cancer
library(survival)
cancer
read.csv(file = "https://raw.githubusercontent.com/ly129/EPIB613_2020/master/scores.csv")
df <- read.csv("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020/scores.csv")
View(df)
setwd("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020")
write.csv("df3.csv")
df <- read.csv("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020/scores.csv")
setwd("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020")
write.csv("df3.csv")
write.csv(df, "df3.csv")
setwd("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020")
plot(df$scores)
x <- 6
y <- 1:10
save.image("log.RData")
load("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020/log.RData")
x
load("~/Desktop/Teaching/EPIB613/2020/EPIB613_2020/log.RData")
